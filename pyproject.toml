[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pysdccc"
dynamic = ["version"]
authors = [
    { name = "Leon Budnick", email = "leon.budnick@draeger.com" },
]
description = "Python wrapper for sdccc test tool"
requires-python = ">=3.11, <3.14"
dependencies = [
    'junitparser>=3.1.2',
    'toml',
]

[project.urls]
"Homepage" = "https://github.com/Draegerwerk/pysdccc"
"Bug Tracker" = "https://github.com/Draegerwerk/pysdccc/issues"

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-html",
    "ruff>=0.7.3",
    "pyright",
    "lxml-stubs",
    "types-toml",
]

[tool.hatch.build.targets.sdist]
include = [
    "src/pysdccc/**/*",
    "pyproject.toml",
]
support-legacy = false

[tool.hatch.build.targets.wheel]
packages = ["src/pysdccc"]

[tool.hatch.version]
path = "src/pysdccc/__init__.py"

[tool.ruff]
lint.extend-select = [# https://docs.astral.sh/ruff/settings/#extend-select
    "A", # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "ANN", # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "ARG", # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "B", # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "BLE", # https://docs.astral.sh/ruff/rules/#flake8-blind-except-ble
    "C4", # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "C90", # https://docs.astral.sh/ruff/rules/#mccabe-c90
    "COM", # https://docs.astral.sh/ruff/rules/#flake8-commas-com
    "D", # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "ERA", # https://docs.astral.sh/ruff/rules/#eradicate-era
    "G", # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
    "I", # https://docs.astral.sh/ruff/rules/#isort-i
    "ICN", # https://docs.astral.sh/ruff/rules/#flake8-import-conventions-icn
    "INP", # https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp
    "ISC", # https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
    "ICN", # https://docs.astral.sh/ruff/rules/#flake8-import-conventions-icn
    "N", # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "PGH", # https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh
    "PIE", # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
    "PL", # https://docs.astral.sh/ruff/rules/#pylint-pl
    "PT", # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "PTH", # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "PYI", # https://docs.astral.sh/ruff/rules/#flake8-pyi-pyi
    "Q", # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "RET", # https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "RSE", # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
    "RUF", # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "S", # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "SIM", # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "SLF", # https://docs.astral.sh/ruff/rules/#flake8-self-slf
    "T20", # https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "TCH", # https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "TID", # https://docs.astral.sh/ruff/rules/#flake8-tidy-imports-tid
    "UP", # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "YTT"  # https://docs.astral.sh/ruff/rules/#flake8-2020-ytt
]
lint.extend-ignore = [# https://docs.astral.sh/ruff/settings/#extend-ignore
    "ANN101", # https://docs.astral.sh/ruff/rules/missing-type-self/
    "ANN102", # https://docs.astral.sh/ruff/rules/missing-type-cls/
    "ANN204", # https://docs.astral.sh/ruff/rules/missing-return-type-special-method/
    "ANN401", # https://docs.astral.sh/ruff/rules/any-type/
    "C408", # https://docs.astral.sh/ruff/rules/unnecessary-collection-call/
    "C409", # https://docs.astral.sh/ruff/rules/unnecessary-literal-within-tuple-call/
    "D105", # undocumented-magic-method
    "D107", # undocumented-public-init
    "D203", # one-blank-line-before-class
    "D213", # multi-line-summary-second-line
    "Q000", # https://docs.astral.sh/ruff/rules/bad-quotes-inline-string/
    "S101", # https://docs.astral.sh/ruff/rules/assert/
    "S311", # https://docs.astral.sh/ruff/rules/suspicious-non-cryptographic-random-usage/
    "SIM102", # collapsible-if
    "T201", # https://docs.astral.sh/ruff/rules/print/
]

line-length = 120  # https://docs.astral.sh/ruff/settings/#line-length
target-version = "py311" # https://docs.astral.sh/ruff/settings/#target-version
# Allow imports relative to the "src" and "test" directories.
src = ["src", "tests"]  # https://docs.astral.sh/ruff/settings/#src

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true # https://docs.astral.sh/ruff/settings/#allow-star-arg-any
suppress-none-returning = true # https://docs.astral.sh/ruff/settings/#suppress-none-returning

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true  # https://docs.astral.sh/ruff/settings/#allow-dict-calls-with-keyword-arguments

[tool.ruff.lint.pycodestyle]
max-doc-length = 120 # https://docs.astral.sh/ruff/settings/#max-doc-length

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]

[tool.pyright]
pythonVersion = "3.11"

[tool.pytest.ini_options]
testpaths = [
    "tests"
]

log_cli = true
log_cli_level = "info"
log_cli_format = "%(asctime)s %(levelname)s (%(threadName)-10s) %(filename)s:%(lineno)d %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

log_file = "pytest.log"
log_file_level = "debug"
log_file_format = "%(asctime)s %(levelname)s (%(threadName)-10s) %(filename)s:%(lineno)d %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S:%f"

filterwarnings = [# https://docs.python.org/3/library/warnings.html#warning-filter
    "ignore::pytest.PytestUnhandledThreadExceptionWarning", # may be raised in logging thread if pipe is already closed
]
